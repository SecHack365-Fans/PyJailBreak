openapi: "3.0.0"
info:
  title: PyJailBreak API
  version: "1.0.0"
  description: Black box automated vulnerability scanning tool for Python socket servers
  contact:
    name: satoki & xryuseix
    url: https://github.com/SecHack365-Fans
  license:
    name: MIT
    url: https://github.com/SecHack365-Fans/PyJailBreak/blob/main/LICENSE
servers:
  - url: TBD

paths:
  /scan:
    post:
      summary: Scan a server for vulnerabilities
      description: フロントで入力したものを受け取って、netcatで攻撃対象のエンドポイントへ攻撃する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                endpoint:
                  type: object
                  properties:
                    protocol:
                      type: string
                    domain:
                      type: string
                    port:
                      type: integer
                  description: Target vulnable server endpoint
                  example: {"protocol": "socket", "domain": "localhost", "port": 5000}
                payload:
                  type: array
                  items:
                    type: string
                  description: Payload String for PyJail
                  example: ["__import__('os').system('echo \"Expected String\"')"]
                payload_option:
                  type: string
                  enum: [plain, eval, regex]
                unexpected:
                  type: array
                  items:
                    type: string
                  description: Expected String for Payload executed
                  example: ["Error"]
                unexpected_option:
                  type: string
                  enum: [plain, eval, regex]
              required:
                - endpoint
                - payload
                - unexpected
            example:
              endpoint: https://vulnable.com:8000
              payload: ["__import__('os').system('echo \"Expected String\"')"]
              unexpected: ["Error"]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  severity:
                    type: string
                    enum: [safe, warning, critical, unknown]
                    example: critical
                    description: Severity of the vulnerability (only `success` is `true`)
                  error:
                    type: string
                    example: "Error Message"
                required:
                  - success
              example:
                success: true
                severity: Critical
